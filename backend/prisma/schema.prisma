// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or other DB provider
  url      = env("DATABASE_URL")
}

// Role model
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  permissions Json // CASL abilities in JSON format
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// User model
model User {
  id           String   @id @default(uuid())
  fullName     String
  email        String   @unique
  password     String
  location     String
  phoneNumber  String
  refreshToken String[]
  active       Boolean  @default(true)
  role         Role     @relation(fields: [roleId], references: [id])
  roleId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id]) 
  restaurantId String?
  Order        Order[]
}

// Restaurant model
model Restaurant {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  User[]
  pizzas Pizza[]
}

// Pizza Model (for orders)
model Pizza {
  id          String   @id @default(uuid())
  name        String
  description String?
  toppings    String[]
  price       Float

  orders       Order[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Order model (customer order)
model Order {
  id          String   @id @default(uuid())
  status      String  @default("Preparing")
  quantity    Int
  totalAmount Float
  toppings    String[]
  customer   User   @relation(fields: [customerId], references: [id])
  customerId String

  pizza      Pizza  @relation(fields: [pizzaId], references: [id]) 
  pizzaId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
